apiVersion: apps/v1
kind: Deployment
metadata:
  name: istio-tracing
  namespace: {{ .Release.Namespace }}
  labels:
    app: tracing
    release: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: tracing
  template:
    metadata:
      labels:
        app: tracing
        release: {{ .Release.Name }}
      annotations:
        sidecar.istio.io/inject: "false"
{{- if eq .Values.tracing.provider "jaeger" }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "16686"
{{- if .Values.tracing.contextPath }}
        prometheus.io/path: "{{ .Values.tracing.contextPath }}/metrics"
{{- else }}
        prometheus.io/path: "/{{ .Values.tracing.provider }}/metrics"
{{- end }}
{{- else if eq .Values.tracing.provider "opencensus" }}
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8888"
        prometheus.io/scrape: "true"
{{- end }}
    spec:
{{- if .Values.global.priorityClassName }}
      priorityClassName: "{{ .Values.global.priorityClassName }}"
{{- end }}
{{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
{{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
{{- end }}
{{- end }}
      containers:
{{- if eq .Values.tracing.provider "jaeger" }}
        - name: jaeger
          image: "{{ .Values.tracing.jaeger.hub }}/{{ .Values.tracing.jaeger.image }}:{{ .Values.tracing.jaeger.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "Always" }}
          ports:
            - containerPort: 9411
            - containerPort: 16686
            - containerPort: 5775
              protocol: UDP
            - containerPort: 6831
              protocol: UDP
            - containerPort: 6832
              protocol: UDP
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          {{- if eq .Values.tracing.jaeger.spanStorageType "badger" }}
          - name: BADGER_EPHEMERAL
            value: "false"
          - name: SPAN_STORAGE_TYPE
            value: "badger"
          - name: BADGER_DIRECTORY_VALUE
            value: "/badger/data"
          - name: BADGER_DIRECTORY_KEY
            value: "/badger/key"
          {{- end }}
          - name: COLLECTOR_ZIPKIN_HTTP_PORT
            value: "9411"
          - name: MEMORY_MAX_TRACES
            value: "{{ .Values.tracing.jaeger.memory.max_traces }}"
          - name: QUERY_BASE_PATH
            value: {{ if .Values.tracing.contextPath }} {{ .Values.tracing.contextPath }} {{ else }} /{{ .Values.tracing.provider }} {{ end }}
          livenessProbe:
            httpGet:
              path: /
              port: 16686
          readinessProbe:
            httpGet:
              path: /
              port: 16686
{{- if eq .Values.tracing.jaeger.spanStorageType "badger" }}
          volumeMounts:
          - name: data
            mountPath: /badger
{{- end }}
          resources:
{{- if .Values.tracing.jaeger.resources }}
{{ toYaml .Values.tracing.jaeger.resources | indent 12 }}
{{- else }}
{{ toYaml .Values.global.defaultResources | indent 12 }}
{{- end }}
{{- if eq .Values.tracing.jaeger.spanStorageType "badger" }}
      volumes:
      - name: data
{{- if .Values.tracing.jaeger.persist }}
        persistentVolumeClaim:
          claimName: istio-jaeger-pvc
{{- else }}
        emptyDir: {}
{{- end }}
{{- end }}
{{- else if eq .Values.tracing.provider "zipkin"}}
        - name: zipkin
          image: "{{ .Values.tracing.zipkin.hub }}/{{ .Values.tracing.zipkin.image }}:{{ .Values.tracing.zipkin.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "Always" }}
          ports:
            - containerPort: {{ .Values.tracing.zipkin.queryPort }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.tracing.zipkin.probeStartupDelay }}
            tcpSocket:
              port: {{ .Values.tracing.zipkin.queryPort }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.tracing.zipkin.probeStartupDelay }}
            httpGet:
              path: /health
              port: {{ .Values.tracing.zipkin.queryPort }}
          resources:
{{- if .Values.tracing.zipkin.resources }}
{{ toYaml .Values.tracing.zipkin.resources | indent 12 }}
{{- else }}
{{ toYaml .Values.global.defaultResources | indent 12 }}
{{- end }}
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: QUERY_PORT
              value: "{{ .Values.tracing.zipkin.queryPort }}"
            - name: JAVA_OPTS
              value: "-XX:ConcGCThreads={{ .Values.tracing.zipkin.node.cpus }} -XX:ParallelGCThreads={{ .Values.tracing.zipkin.node.cpus }} -Djava.util.concurrent.ForkJoinPool.common.parallelism={{ .Values.tracing.zipkin.node.cpus }} -Xms{{ .Values.tracing.zipkin.javaOptsHeap }}M -Xmx{{ .Values.tracing.zipkin.javaOptsHeap }}M -XX:+UseG1GC -server"
            - name: STORAGE_METHOD
              value: "mem"
            - name: ZIPKIN_STORAGE_MEM_MAXSPANS
              value: "{{ .Values.tracing.zipkin.maxSpans }}"
{{- else if eq .Values.tracing.provider "opencensus"}}
        - name: opencensus-collector
          image: "{{ .Values.tracing.opencensus.hub }}/opencensus-collector:{{ .Values.tracing.opencensus.tag }}"
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "Always" }}
          command:
            - "/occollector_linux"
            - "--config=/conf/oc-collector-config.yaml"
          ports:
          - containerPort: 9411
          resources:
{{- if .Values.tracing.opencensus.resources }}
{{ toYaml .Values.tracing.opencensus.resources | indent 12 }}
{{- else }}
{{ toYaml .Values.global.defaultResources | indent 12 }}
{{- end }}
          volumeMounts:
          - name: oc-collector-config-vol
            mountPath: /conf
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          env:
          - name: GOGC
            value: "80"
      volumes:
        - configMap:
            name: oc-collector-config
            items:
              - key: oc-collector-config
                path: oc-collector-config.yaml
          name: oc-collector-config-vol
{{- end }}
      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
      {{- include "podAntiAffinity" . | indent 6 }}
